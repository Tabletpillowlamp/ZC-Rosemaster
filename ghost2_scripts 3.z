namespace tempPatches
{
	const int BASE_LINK_Z = 0;
}

// ===========================================================
// ================== CONSTANTS & VARIABLES ==================
// ===========================================================

// Barriers
const int SCRIPT_BARRIERS = 7;
const int BARRIER_A_RAISED           = 4656;
const int BARRIER_B_RAISED           = 4657;
const int BARRIER_A_LOWERED          = 4658;
const int BARRIER_B_LOWERED          = 4659;
const int BARRIER_A_ANIMRAISE        = 4660;
const int BARRIER_B_ANIMRAISE        = 4661;
const int BARRIER_A_ANIMLOWER        = 4662;
const int BARRIER_B_ANIMLOWER        = 4663;
const int BARRIER_A_WALKABLE         = 4664;
const int BARRIER_B_WALKABLE         = 4665;
const int BARRIER_A_SWITCH           = 4666;
const int BARRIER_B_SWITCH           = 4667;
const int BARRIER_SWITCH_DUMMY 		 = 177; 
const int BARRIER_SWITCH_DUMMY_HP	 = 32767;	

bool barriers[511]; 							// false = blue barriers raised, true = red barriers raised
int scrollDir;
int scrollCounter;
int drawX;
int drawY;

// Moosh Pitfalls
int MooshPit[16];
const int MP_LASTX = 0;
const int MP_LASTY = 1;
const int MP_LASTDMAP = 2;
const int MP_LASTSCREEN = 3;
const int MP_ENTRYX = 4;
const int MP_ENTRYY = 5;
const int MP_ENTRYDMAP = 6;
const int MP_ENTRYSCREEN = 7;
const int MP_FALLX = 8;
const int MP_FALLY = 9;
const int MP_FALLTIMER = 10;
const int MP_FALLSTATE = 11;
const int MP_DAMAGETYPE = 12;

const int CT_HOLELAVA = 128; //Combo type for pits (No Ground Enemies by default)
const int CF_LAVA = 98; //Combo flag marking pits as lava (Script 1 by default)

const int SPR_FALLHOLE = 89; //Sprite for Link falling in a hole
const int SPR_FALLLAVA = 90; //Sprite for Link falling in lava

const int SFX_FALLHOLE = 87; //Sound for falling in a hole
const int SFX_FALLLAVA = 13; //Sound for falling in lava

const int DAMAGE_FALLHOLE = 8; //How much damage pits deal (1/2 heart default)
const int DAMAGE_FALLLAVA = 16; //How much damage lava deals (1 heart default)

const int FFC_MOOSHPIT_AUTOWARPA = 32; //FFC that turns into an auto side warp combo when you fall in a pit
const int CMB_MOOSHPIT_AUTOWARPA = 6391; //Combo number of an invisible Auto Side Warp A combo
const int SF_MISC_MOOSHPITWARP = 2; //Number of the screen flag under the Misc. section that makes pits warp (Script 1 by default)
//All pit warps use Side Warp A

const int MOOSHPIT_MIN_FALL_TIME = 60; //Minimum time for the pit's fall animation, to prevent repeated falling in pits
const int MOOSHPIT_EXTRA_FALL_TIME = 0; //Extra frames at the end of the falling animation before Link respawns

//Width and height of Link's hitbox for colliding with pits
const int MOOSHPIT_LINKHITBOXWIDTH = 2;
const int MOOSHPIT_LINKHITBOXHEIGHT = 2;

//Width and height of Link's hitbox for colliding with pits/lava in sideview
const int MOOSHPIT_SIDEVIEW_LINKHITBOXWIDTH = 2;
const int MOOSHPIT_SIDEVIEW_LINKHITBOXHEIGHT = 2;

const int MOOSHPIT_NO_GRID_SNAP = 0; //Set to 1 to prevent Link's falling sprite from snapping to the combo grid.




// ===========================================================
// =================== FUNCTIONS & BOOLS =====================
// ===========================================================

// ======================== BARRIERS ========================

// Function that makes preparations for barriers on each screen and starts an FFC script
void Barriers_NewScreen(){
	// Search for a barrier-related combo
	for (int i = 0; i <= 175; ++i) {
		int cd = Screen->ComboD[i];
		if (cd == BARRIER_A_RAISED || cd == BARRIER_A_LOWERED || cd == BARRIER_A_SWITCH ||
			cd == BARRIER_B_RAISED || cd == BARRIER_B_LOWERED || cd == BARRIER_B_SWITCH){
			// A barrier-related combo was found
			
			// Make initial changes to combos
			if (barriers[Game->GetCurDMap()]){
				for (int j = i; j <= 175; ++j){
					int cd = Screen->ComboD[j];
					if (cd == BARRIER_A_RAISED) Screen->ComboD[j] = BARRIER_A_LOWERED;
					else if (cd == BARRIER_B_LOWERED) Screen->ComboD[j] = BARRIER_B_RAISED;
					else if (cd == BARRIER_A_SWITCH) Screen->ComboD[j] = BARRIER_B_SWITCH;
				}
			}
			else {
				for (int j = i; j <= 175; j++){
					int cd = Screen->ComboD[j];
					if (cd == BARRIER_B_RAISED) Screen->ComboD[j] = BARRIER_B_LOWERED;
					else if (cd == BARRIER_A_LOWERED) Screen->ComboD[j] = BARRIER_A_RAISED;
					else if (cd == BARRIER_B_SWITCH) Screen->ComboD[j] = BARRIER_A_SWITCH;
				}
			}
			// So run FFCscript to control barriers
			int args[] = {0,0,0,0,0,0,0,0};
			RunFFCScript(SCRIPT_BARRIERS, args);
			break;
		}
	}
}

// This lets you toggle barriers on any dmap
bool ToggleBarriers(int dmap) {
	if (dmap == Game->GetCurDMap()) ToggleBarriers();
	else barriers[dmap] = !barriers[dmap];
	return barriers[dmap];
}

// This toggles barriers on the current dmap
bool ToggleBarriers() {
	int curdmap = Game->GetCurDMap();
	if (!barriers[curdmap]){
		barriers[curdmap] = true;
		for (int i = 0; i <= 175; i++){
			int cd = Screen->ComboD[i];
			if (cd == BARRIER_A_RAISED || cd == BARRIER_A_WALKABLE || cd == BARRIER_A_ANIMRAISE){
				Screen->ComboD[i] = BARRIER_A_ANIMLOWER;
			}
			else if (cd == BARRIER_B_LOWERED || cd == BARRIER_B_ANIMLOWER){
				Screen->ComboD[i] = BARRIER_B_ANIMRAISE;
			}
			else if (cd == BARRIER_A_SWITCH){
				Screen->ComboD[i] = BARRIER_B_SWITCH;
			}
		}
	}
	else {
		barriers[curdmap] = false;
		for (int i = 0; i <= 175; i++){
			int cd = Screen->ComboD[i];
			if (cd == BARRIER_B_RAISED || cd == BARRIER_B_WALKABLE || cd == BARRIER_B_ANIMRAISE){
				Screen->ComboD[i] = BARRIER_B_ANIMLOWER;
			}
			else if (cd == BARRIER_A_LOWERED || cd == BARRIER_A_ANIMLOWER){
				Screen->ComboD[i] = BARRIER_A_ANIMRAISE;
			}
			else if (cd == BARRIER_B_SWITCH){
				Screen->ComboD[i] = BARRIER_A_SWITCH;
			}
		}
	}
	return barriers[curdmap];
}	

// ======================== ITEM SWITCH ========================

void LREx1Ex2ItemSwitch(){
	if (Link->PressL && Link->Action != LA_SCROLLING)
	{
		Link->SelectBWeapon(DIR_LEFT);
	}
	if (Link->PressR && Link->Action != LA_SCROLLING)
	{
		Link->SelectBWeapon(DIR_RIGHT);
	}
	if (Link->PressEx1 && Link->Action != LA_SCROLLING)
	{
		Link->SelectAWeapon(DIR_LEFT);
	}
	if (Link->PressEx2 && Link->Action != LA_SCROLLING)
	{
		Link->SelectAWeapon(DIR_RIGHT);
	}
}

// ======================== MOOSH PITS ========================

bool MooshPit_OnPit(int LinkX, int LinkY, bool countFFCs){
	if(Link->Action==LA_FROZEN)
	return false;
	
	if(countFFCs){
		if(MooshPit_OnFFC(LinkX, LinkY))
		return false;
	}
	
	bool sideview;
	if(Screen->Flags[SF_ROOMTYPE]&100b)
	sideview = true;
	//wew lad
	int width = MOOSHPIT_LINKHITBOXWIDTH;
	int height = MOOSHPIT_LINKHITBOXHEIGHT;
	for(int x=0; x<=1; x++){
		for(int y=0; y<=1; y++){
			int X; int Y;
			if(sideview){ //Hitbox functions differently in sideview
				width = MOOSHPIT_SIDEVIEW_LINKHITBOXWIDTH;
				height = MOOSHPIT_SIDEVIEW_LINKHITBOXHEIGHT;
				X = LinkX+7-width/2+width;
				Y = LinkY+7-height/2+height;
			}
			else{
				X = LinkX+7-width/2+width;
				Y = LinkY+11-height/2+height;
			}
			
			//If one corner of Link's hitbox isn't on a pit, return false
			if(Screen->ComboT[ComboAt(X, Y)]!=CT_HOLELAVA){
				return false;
			}
		}
	}
	return true;
}

bool MooshPit_OnFFC(int LinkX, int LinkY){
	for(int i=1; i<=32; i++){ //Cycle through every FFC
		ffc f = Screen->LoadFFC(i);
		//Check if the FFC is solid
		if(f->Data>0&&!f->Flags[FFCF_CHANGER]&&!f->Flags[FFCF_ETHEREAL]){
			//Check if Link collides with the FFC
			if(RectCollision(LinkX+4, LinkY+9, LinkX+11, LinkY+14, f->X, f->Y, f->X+f->EffectWidth-1, f->Y+f->EffectHeight-1)){
				return true;
			}
		}
	}
	//If Link doesn't collide with any FFC, return false
	return false;
}
	
void MooshPit_Init(){
	MooshPit[MP_LASTX] = Link->X;
	MooshPit[MP_LASTY] = Link->Y;
	MooshPit[MP_LASTDMAP] = Game->GetCurDMap();
	MooshPit[MP_LASTSCREEN] = Game->GetCurDMapScreen();
	MooshPit[MP_ENTRYX] = Link->X;
	MooshPit[MP_ENTRYY] = Link->Y;
	MooshPit[MP_ENTRYDMAP] = Game->GetCurDMap();
	MooshPit[MP_ENTRYSCREEN] = Game->GetCurDMapScreen();
	MooshPit[MP_FALLSTATE] = 0;
	MooshPit[MP_FALLTIMER] = 0;
	Link->CollDetection = true;
	Link->Invisible = false;
}

void MooshPit_Update(){
	bool isWarp;
	if(Screen->Flags[SF_MISC]&(1<<SF_MISC_MOOSHPITWARP))
	isWarp = true;
	
	bool sideview;
	if(Screen->Flags[SF_ROOMTYPE]&100b)
	sideview = true;
	
	if(Link->Action!=LA_SCROLLING){
		//Update the entry point whenever the screen changes
		if(MooshPit[MP_ENTRYDMAP]!=Game->GetCurDMap()||MooshPit[MP_ENTRYSCREEN]!=Game->GetCurDMapScreen()){
			MooshPit[MP_ENTRYX] = Link->X;
			MooshPit[MP_ENTRYY] = Link->Y;
			MooshPit[MP_ENTRYDMAP] = Game->GetCurDMap();
			MooshPit[MP_ENTRYSCREEN] = Game->GetCurDMapScreen();
		}
		
		if(MooshPit[MP_FALLSTATE]==0)
		{ //Not falling in pit
			//LogPrint("FallState == 0 %s \n", "checking if over a pit");
			//LogPrint("Link is over a pit 2? %s \n", ( (MooshPit_OnPit(Link->X, Link->Y, true)) ? "true" : "false"));
			
			if(Link->Z<=tempPatches::BASE_LINK_Z&&MooshPit_OnPit(Link->X, Link->Y, true))
			{
				//LogPrint("Link is over a pit 3? %s \n", ( (MooshPit_OnPit(Link->X, Link->Y, true)) ? "true" : "false"));
			
				//If Link steps on a pit
				int underLink;
				if(!sideview)
				underLink = ComboAt(Link->X+8, Link->Y+12);
				else
				underLink = ComboAt(Link->X+8, Link->Y+8);
				//StopDash();
				
				lweapon fall;
				
				//Check if the combo is lava
				if(ComboFI(underLink, CF_LAVA))
				{
					//LogPrint("We should be %s \n", "playing a sound for Lava");
					//Play sound and display animation
					Game->PlaySound(SFX_FALLLAVA);
					fall = CreateLWeaponAt(LW_SCRIPT10, Link->X, Link->Y);
					if(!MOOSHPIT_NO_GRID_SNAP){
						fall->X = ComboX(underLink);
						fall->Y = ComboY(underLink);
					}
					fall->UseSprite(SPR_FALLLAVA);
					fall->CollDetection = false;
					fall->DeadState = fall->ASpeed*fall->NumFrames;
					
					//Mark as lava damage
					MooshPit[MP_DAMAGETYPE] = 1;
				}
				//Otherwise it's a pit
				else
				{
					//LogPrint("We should be %s \n", "playing a sound for a pit");
					//Play sound and display animation
					Game->PlaySound(SFX_FALLHOLE);
					fall = CreateLWeaponAt(LW_SCRIPT10, Link->X, Link->Y);
					if(!MOOSHPIT_NO_GRID_SNAP){
						fall->X = ComboX(underLink);
						fall->Y = ComboY(underLink);
					}
					fall->UseSprite(SPR_FALLHOLE);
					fall->CollDetection = false;
					fall->DeadState = fall->ASpeed*fall->NumFrames;
					
					//Mark as hole damage
					MooshPit[MP_DAMAGETYPE] = 0;
				}
				
				MooshPit[MP_FALLX] = Link->X;
				MooshPit[MP_FALLY] = Link->Y;
				
				//Cooldown should last as long as the fall animation
				MooshPit[MP_FALLSTATE] = 1;
				MooshPit[MP_FALLTIMER] = Max(MOOSHPIT_MIN_FALL_TIME, fall->DeadState+MOOSHPIT_EXTRA_FALL_TIME);
				
				//Render Link invisible and intangible
				Link->Invisible = true;
				Link->CollDetection = false;
				
				NoAction();
				//StopDash();
			}
			else if(!MooshPit_OnPit(Link->X, Link->Y, false)&&Link->Action!=LA_FROZEN){ //All other times, while Link is on solid ground, record Link's last position
				if(sideview){
					//Link has no Z value in sideview, so we check if he's on a platform instead
					if(OnSidePlatform(Link->X, Link->Y)){
						MooshPit[MP_LASTDMAP] = Game->GetCurDMap();
						MooshPit[MP_LASTSCREEN] = Game->GetCurDMapScreen();
						MooshPit[MP_LASTX] = Link->X;
						MooshPit[MP_LASTY] = Link->Y;
					}
				}
				else{
					if(Link->Z<=tempPatches::BASE_LINK_Z){
						MooshPit[MP_LASTDMAP] = Game->GetCurDMap();
						MooshPit[MP_LASTSCREEN] = Game->GetCurDMapScreen();
						MooshPit[MP_LASTX] = Link->X;
						MooshPit[MP_LASTY] = Link->Y;
					}
				}
			}
		}
		else if(MooshPit[MP_FALLSTATE]==1){ //Falling animation
			if(MooshPit[MP_FALLTIMER]>0)
			MooshPit[MP_FALLTIMER]--;
			
			Link->Jump = 0;
			Link->Z = 0;
			
			//Keep Link invisible just in case
			Link->Invisible = true;
			Link->CollDetection = false;
			NoAction();
			//StopDash();
			if(MooshPit[MP_FALLTIMER]==0){
				if(!isWarp||MooshPit[MP_DAMAGETYPE]==1){ //If the pit isn't a warp, deal damage and move Link back to the return point
					//If the entry would dump Link back in the pit, dump him out at the failsafe position
					if(MooshPit_OnPit(MooshPit[MP_ENTRYX], MooshPit[MP_ENTRYY], false)){
						Link->X = MooshPit[MP_LASTX];
						Link->Y = MooshPit[MP_LASTY];
						//If the failsafe position was on a different screen, warp there
						if(Game->GetCurDMap()!=MooshPit[MP_LASTDMAP]||Game->GetCurDMapScreen()!=MooshPit[MP_LASTSCREEN]){
							Link->PitWarp(MooshPit[MP_LASTDMAP], MooshPit[MP_LASTSCREEN]);
						}
						
						Link->Invisible = false;
						Link->CollDetection = true;
					}
					else{
						//Move Link to the start and make him visible
						Link->X = MooshPit[MP_ENTRYX];
						Link->Y = MooshPit[MP_ENTRYY];
						
						Link->Invisible = false;
						Link->CollDetection = true;
					}
					
					//Subtract HP based on damage type
					if(MooshPit[MP_DAMAGETYPE]==1)
					Link->HP -= DAMAGE_FALLLAVA;
					else
					Link->HP -= DAMAGE_FALLHOLE;
					//Play hurt sound and animation
					Link->Action = LA_GOTHURTLAND;
					Link->HitDir = -1;
					Game->PlaySound(SFX_OUCH);
					
					MooshPit[MP_FALLSTATE] = 0;
				}
				else{
					MooshPit[MP_FALLSTATE] = 2;
					MooshPit[MP_FALLTIMER] = 1;
					ffc warp = Screen->LoadFFC(FFC_MOOSHPIT_AUTOWARPA);
					warp->Data = CMB_MOOSHPIT_AUTOWARPA;
					warp->Flags[FFCF_CARRYOVER] = false;
				}
			}
		}
		else if(MooshPit[MP_FALLSTATE]==2){ //Just warped
			if(sideview){
				Link->X = MooshPit[MP_FALLX];
				Link->Y = 0;
			}
			else{
				Link->X = MooshPit[MP_FALLX];
				Link->Y = MooshPit[MP_FALLY];
				Link->Z = 176;
			}
			Link->Invisible = false;
			Link->CollDetection = true;
			
			MooshPit[MP_FALLSTATE] = 0;
			MooshPit[MP_FALLTIMER] = 0;
		}
	}
}

void MooshPit_ResetEntry(){
	MooshPit[MP_ENTRYX] = Link->X;
	MooshPit[MP_ENTRYY] = Link->Y;
	MooshPit[MP_ENTRYDMAP] = Game->GetCurDMap();
	MooshPit[MP_ENTRYSCREEN] = Game->GetCurDMapScreen();
}

void onScreenChange(){
    Game->SkipF6 = false;
}

int LinkOnComboD() {
	return Screen->ComboD[ComboAt(Link->X+8, Link->Y+13)];
}
// ======================== GLOBAL ========================

global script RMglobal{
	void run()
	{
		bool Ice_Input[4];
		TraceS("@Running globl");
		// Initialize variables used to listen on screen changes
		int curscreen = -1; int lastScreen = Game->GetCurScreen();
		int lastMap = Game->GetCurMap();
		int oldscreen = Game->GetCurScreen();
		StartGhostZH();
		
		while (true)
		{
			UpdateGhostZH1();
			PushAnimation();
			MooshPit_Update();
			
			//Shield Selection
			if(Link->PressEx3){
				ShieldSelection();
			}
			if(lastScreen != Game->GetCurScreen() || lastMap != Game->GetCurMap())
			{
				onScreenChange();
				lastScreen = Game->GetCurScreen();
				lastMap = Game->GetCurMap();
			}
			Waitdraw();
			UpdateGhostZH2();
			// Keep track of screen changes
			// Run a Barrier script on every screen change
			if (Game->GetCurScreen() != curscreen)
			{
				curscreen = Game->GetCurScreen();
				Barriers_NewScreen();
			}
			LREx1Ex2ItemSwitch();
			oldscreen = Game->GetCurScreen();
			Waitframe();
				
		}
			
	}
}

global script Init
{
	void run()
	{
		MooshPit_Init();
	}
}